/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sonpc.view;

import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import sonpc.daos.ArmorDAO;
import sonpc.dtos.ArmorDTO;
import sonpc.tablemodel.ArmorTableModel;

/**
 *
 * @author ACER
 */
public class viewClient extends javax.swing.JFrame {

    /**
     * Creates new form viewClient
     */
    private final String DATE_FORMAT = "dd/MM/yyyy";
    private final String[] HEADERS = {"ID", "Classification", "TimeOfCreate", "Defense"};
    private final int[] INDEXES = {1, 2, 5, 6};
    private ArmorTableModel tableModel = new ArmorTableModel(HEADERS, INDEXES);
    boolean addNew = false;

    public viewClient() {
        initComponents();

        tblArmor.setModel(tableModel);

        setEditableFalse();
        loadTable();

    }

    private void setEditableTrue() {
        txtTimeOfCreate.setEditable(false);
        txtArmorID.setEditable(true);
        txtClassification.setEditable(true);
        txtDefense.setEditable(true);
        txtStatus.setEditable(true);
        areaDescription.setEditable(true);
    }

    private void setEditableFalse() {
        txtTimeOfCreate.setEditable(false);
        txtArmorID.setEditable(false);
        txtClassification.setEditable(false);
        txtDefense.setEditable(false);
        txtStatus.setEditable(false);
        areaDescription.setEditable(false);
    }

    private void loadTable() {
        //load a list of Armor to table
        try {
            ArmorDAO dao = new ArmorDAO();

            List<ArmorDTO> listaArmorDTOs = dao.findAllArmor();

            tableModel.loadData(listaArmorDTOs);

            tblArmor.updateUI();

        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            JOptionPane.showMessageDialog(null, "Server did not start, App will shut down");
            System.exit(0);
        }
    }

    private boolean defenseRegex() {
        String regex = "[0-9]{1,5}";
        String defenseString = txtDefense.getText().trim();
        boolean p = defenseString.matches(regex);
        return p;
    }

    private boolean armorIDRegex() {
        String regex = "[A-Za-z0-9]{1,10}";
        String armorID = txtArmorID.getText().trim();
        boolean p = armorID.matches(regex);
        return p;
    }

    private boolean classificationRegex() {
        String regex = "[A-Za-z0-9]{1,30}";
        String classification = txtClassification.getText().trim();
        boolean p = classification.matches(regex);
        return p;
    }

    private boolean descriptionRegex() {
        String regex = "[A-Za-z0-9]{1,300}";
        String description = areaDescription.getText();
        boolean p = description.matches(regex);
        return p;
    }

    private boolean statusRegex() {
        String regex = "[A-Za-z0-9]{1,10}";
        String status = txtStatus.getText().trim();
        boolean p = status.matches(regex);
        return p;
    }

    private boolean checkDuplicateArmor() {
        try {
            ArmorDAO dao = new ArmorDAO();
            List<ArmorDTO> listdtos = dao.findAllArmor();
            String armorID = txtArmorID.getText().trim();
            for (ArmorDTO dto : listdtos) {
                if (armorID.equals(dto.getArmorID())) {
                    return false;
                }
            }

        } catch (RemoteException ex) {
            Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblArmor = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtArmorID = new javax.swing.JTextField();
        txtClassification = new javax.swing.JTextField();
        txtTimeOfCreate = new javax.swing.JTextField();
        txtDefense = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        areaDescription = new javax.swing.JTextArea();
        txtStatus = new javax.swing.JTextField();
        btnFindArmorID = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnGetAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 255));
        jLabel1.setText("Armor Client");

        tblArmor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblArmor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblArmorMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblArmor);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Armor's Details:"));

        jLabel2.setText("ArmorID:");

        jLabel3.setText("Classification:");

        jLabel4.setText("TimeofCreate:");

        jLabel5.setText("Defense:");

        jLabel6.setText("Description:");

        jLabel7.setText("Status:");

        areaDescription.setColumns(20);
        areaDescription.setRows(5);
        jScrollPane1.setViewportView(areaDescription);

        btnFindArmorID.setText("Find By ArmorID");
        btnFindArmorID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindArmorIDActionPerformed(evt);
            }
        });

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(16, 16, 16)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtClassification)
                            .addComponent(txtArmorID)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(btnCreate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTimeOfCreate)
                            .addComponent(txtDefense)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                            .addComponent(txtStatus)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(btnSave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdate)))))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                        .addComponent(btnRemove)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnFindArmorID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtArmorID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindArmorID))
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtClassification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset))
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtTimeOfCreate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtDefense, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnUpdate)
                    .addComponent(btnRemove)
                    .addComponent(btnSave))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        btnGetAll.setText("Get All");
        btnGetAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(372, 372, 372)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(btnGetAll)))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)
                        .addComponent(btnGetAll)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblArmorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblArmorMouseClicked
        int selectedRow = tblArmor.getSelectedRow();

        setEditableTrue();
        txtArmorID.setEditable(false);

        if (selectedRow < 0) {
            return;
        } else {
            //lấy ra dto: từ model => data(vector) => 
            ArmorDTO dto = tableModel.getData().get(selectedRow);
            String armorID = dto.getArmorID();
            String classification = dto.getClassification();
            String description = dto.getDescription();
            String status = dto.getStatus();
            Date timeOfCreate = dto.getTimeOfCreate();
            int defense = dto.getDefense();

            //parsing Date và int thành String để settext
            SimpleDateFormat format = new SimpleDateFormat(DATE_FORMAT);
            String timeString = format.format(timeOfCreate);
            //Settext
            txtArmorID.setText(armorID);
            txtClassification.setText(classification);
            txtTimeOfCreate.setText(timeString);
            txtDefense.setText(defense + "");
            areaDescription.setText(description);
            txtStatus.setText(status);
            //Ko cho edit timeOfCreate
            txtTimeOfCreate.setEditable(false);
        }


    }//GEN-LAST:event_tblArmorMouseClicked

    private void btnFindArmorIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindArmorIDActionPerformed
        try {
            setEditableTrue();
            //clear all data in table to display search result
            tableModel = new ArmorTableModel(HEADERS, INDEXES);
            //get armorID by user
            String armorID = txtArmorID.getText().trim();
            //call Model
            ArmorDAO dao = new ArmorDAO();
            ArmorDTO result = dao.findArmorByID(armorID);
            //xử lý result
            if (result == null) {
                JOptionPane.showMessageDialog(null, "No record armor!");
            }//end if
            else {
                //new 1 list ArmorDTO to store result
                List<ArmorDTO> listRecord = new Vector<>();
                //add result to list
                listRecord.add(result);
                //load data vào displayModel
                tableModel.loadData(listRecord);
                //set model cho tblArmor
                tblArmor.setModel(tableModel);
                //udpateUI
                tblArmor.updateUI();
            }

        } catch (RemoteException ex) {
            Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnFindArmorIDActionPerformed

    private void btnGetAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetAllActionPerformed
        try {
            //Clear everything in table to display the orginal data
            tableModel = new ArmorTableModel(HEADERS, INDEXES);
            //call dao
            ArmorDAO dao = new ArmorDAO();
            //call dao method
            List<ArmorDTO> listDTOs = dao.findAllArmor();
            //load Data to tableModel
            tableModel.loadData(listDTOs);
            //set model to tblArmor
            tblArmor.setModel(tableModel);
            //updateUI
            tblArmor.updateUI();

        } catch (RemoteException ex) {
            Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnGetAllActionPerformed

    private void resetAllFieldArmor() {
        txtArmorID.setText("");
        txtClassification.setText("");
        txtDefense.setText("");
        areaDescription.setText("");
        txtStatus.setText("");
        //set ngày giờ hiện tại cho time of create
        Date now = new Date();
        SimpleDateFormat format = new SimpleDateFormat(DATE_FORMAT);
        String timeOfCreate = format.format(now);
        txtTimeOfCreate.setText(timeOfCreate);
        txtTimeOfCreate.setEditable(false);
    }

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        addNew = true;
        setEditableTrue();
        resetAllFieldArmor();
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (!armorIDRegex()) {
            JOptionPane.showMessageDialog(this, "Invalid ArmorID");
            return;
        } else if (!classificationRegex()) {
            JOptionPane.showMessageDialog(this, "Invalid Classification");
            return;
        } else if (!defenseRegex()) {
            JOptionPane.showMessageDialog(this, "Invalid Defense");
            return;
        } else if (!descriptionRegex()) {
            JOptionPane.showMessageDialog(this, "Invalid Description");
            return;
        } else if (!statusRegex()) {
            JOptionPane.showMessageDialog(this, "Invalid Status");
            return;
        } else {
            try {
                // TODO add your handling code here:
                addNew = false;
                setEditableTrue();
                String armorID = txtArmorID.getText().trim();
                String classification = txtClassification.getText().trim();
                String defenseString = txtDefense.getText().trim();
                String dateString = txtTimeOfCreate.getText().trim();
                String description = areaDescription.getText().trim();
                String status = txtStatus.getText().trim();
                //parsing
                SimpleDateFormat format = new SimpleDateFormat(DATE_FORMAT);
                Date date = format.parse(dateString);
                int defense = Integer.parseInt(defenseString);
                //add to dto
                ArmorDTO dto = new ArmorDTO(armorID, classification, description, status, date, defense);
                //call dao
                ArmorDAO dao = new ArmorDAO();
                //xu ly dao
                boolean result = dao.updateArmor(dto);
                if (result) {
                    //updateUI
                    List<ArmorDTO> listdtos = dao.findAllArmor();
                    tableModel = new ArmorTableModel(HEADERS, INDEXES);
                    tableModel.loadData(listdtos);
                    tblArmor.setModel(tableModel);
                    JOptionPane.showMessageDialog(this, "Update Succees!!!");
                    tblArmor.updateUI();
                    //
                } else {
                    JOptionPane.showMessageDialog(this, "Update Failed!!!");
                }
            } catch (RemoteException ex) {
                Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NotBoundException ex) {
                Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
           
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        try {
            // TODO add your handling code here:
            int confirmation = JOptionPane.showConfirmDialog(this, "Do you want to delete this armor?");
            if (confirmation == JOptionPane.YES_OPTION) {
                ArmorDAO dao = new ArmorDAO();
                String armorID = txtArmorID.getText().trim();
                boolean result = dao.removeArmor(armorID);
                if (result) {
                    //updateUI
                    List<ArmorDTO> listResult = dao.findAllArmor();
                    tableModel = new ArmorTableModel(HEADERS, INDEXES);
                    tableModel.loadData(listResult);
                    tblArmor.setModel(tableModel);
                    tblArmor.updateUI();
                    JOptionPane.showMessageDialog(this, "Delete Success");
                    resetAllFieldArmor();
                }//end if result
                else {
                    JOptionPane.showMessageDialog(this, "Delete Failed");
                }
            }//end if confirmation
            else {
                return;
            }
        } catch (RemoteException ex) {
            Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (!armorIDRegex()) {
            JOptionPane.showMessageDialog(this, "Invalid ArmorID");
            return;
        } else if (!classificationRegex()) {
            JOptionPane.showMessageDialog(this, "Invalid Classification");
            return;
        } else if (!defenseRegex()) {
            JOptionPane.showMessageDialog(this, "Invalid Defense");
            return;
        } else if (!descriptionRegex()) {
            JOptionPane.showMessageDialog(this, "Invalid Description");
            return;
        } else if (!statusRegex()) {
            JOptionPane.showMessageDialog(this, "Invalid Status");
            return;
        } else if (!checkDuplicateArmor()) {
            JOptionPane.showMessageDialog(this, "Duplicate ArmorID");
        } else {
            try {
                //addNew
                addNew = true;
                //lấy toàn bộ dữ liệu từ txt về
                String armorID = txtArmorID.getText().trim();
                String classification = txtClassification.getText().trim();
                String date = txtTimeOfCreate.getText().trim();
                String defenseString = txtDefense.getText().trim();
                String description = areaDescription.getText().trim();
                String status = txtStatus.getText().trim();
                SimpleDateFormat format = new SimpleDateFormat(DATE_FORMAT);
                Date timeOfCreate = format.parse(date);
                int defense = Integer.parseInt(defenseString);
                //save to dto
                ArmorDTO dto = new ArmorDTO(armorID, classification, description, status, timeOfCreate, defense);
                //call dao
                ArmorDAO dao = new ArmorDAO();
                boolean result = dao.addNewArmor(dto);
                if (result) {
                    //1: load lại data rồi update UI
                    List<ArmorDTO> listResult = dao.findAllArmor();
                    //2:clear bảng hiện tại để đưa dữ liệu mới lên
                    tableModel = new ArmorTableModel(HEADERS, INDEXES);
                    tableModel.loadData(listResult);
                    tblArmor.setModel(tableModel);
                    JOptionPane.showMessageDialog(this, "Save Success");
                    tblArmor.updateUI();
                }
                //reset All fields back to normal
                resetAllFieldArmor();

            } catch (RemoteException ex) {
                Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NotBoundException ex) {
                Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(viewClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        resetAllFieldArmor();
        setEditableTrue();
    }//GEN-LAST:event_btnResetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(viewClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(viewClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(viewClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new viewClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaDescription;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnFindArmorID;
    private javax.swing.JButton btnGetAll;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblArmor;
    private javax.swing.JTextField txtArmorID;
    private javax.swing.JTextField txtClassification;
    private javax.swing.JTextField txtDefense;
    private javax.swing.JTextField txtStatus;
    private javax.swing.JTextField txtTimeOfCreate;
    // End of variables declaration//GEN-END:variables
}
